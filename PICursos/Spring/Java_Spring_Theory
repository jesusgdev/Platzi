"Java Annotations Autowired"

1. Crear clase + interfaz a inyectar(dependencia)
Primero creamos una interfaz con el metodo que queramos 
usar.
Posteriormente creamos la clase en la cual implementaremos la interfaz y sobreescribimos el metodo en funcion de lo que 
necesitemos.

2. Crear constructor para inyeccion en la clase que lo solicite
Ahora vamos a crear o instanciar un objeto de la interfaz creada 
previamente (sin inicializarlo) dentro de la clase la cual va a solicitar la inyeccion de la dependencia, y creamos el constructor 
utilizando este objeto como campo (Esto nos va a permitir a traves 
de la anotacion Autowired poder acceder a todos los metodos de todas las clases donde fue implementada esta interfaz, de alli la palabra 
wired).

3. Configurar la dependencia con @Autowired
Luego encima del nombre donde esta declarada la clase que hicimos 
al comienzo colocamos la anotacion @Component lo que permitira al 
contenedor de Spring mediante la etiqueta Scan reconocer esta clase.
Por ultimo colocamos la anotacion @Autowired sobre el constructor que creamos, y Spring buscara aquella clase que implemente la interfaz asociada al tipo de objeto que recibio como atributo dicho constructor

La utilidad de la anotacion @Autowired es que nos permite obtener 
utilizar metodos pertenecientes a la interfaz y que fueron sobrescritos en otras clases para ser utilizados en la clase donde 
hallamos declarado nuestro objeto del mismo tipo de la interfaz, haciendo uso unicamente de un metodo (puede ser o no constructor) 
que haga referencia a este objeto mediante la anotacion @Autowired 
(Si hay un solo metodo constructor no es necesario colocar la 
anotacion pero por buenas practicas es aconsejable siempre colocarla), asi podremos invocar estos metodos haciendo uso de 
la declaracion de este objeto llamando al metodo que queramos utilizar que se encuentre en otras clases pero que pertenezca a la interfaz.

Con @Autowired tambien podemos establecer la relacion de la declaracion del objeto de la interfaz con los metodos de otras clases pertenecientes a la interfaz usando la anotacion directamente sobre la declaracion del objeto. Ejemplo:

@Autowired
public Interfaz_name object_name; (Investigar Reflexion)

En conclucion podemos usar un metodo constructor, un metodo setter 
o un metodo cualquiera, incluso un campo de clase(intanciazion directa del objeto de la interfaz) para utilizar el @Autowired.

Cuando deseamos utilizar un metodo que ha sido sobreescrito en mas de clase debemos utilizar la anotacion @Qualifier, esto se hace con la idea de que Spring pueda reconocer cual metodo en especifico deseamos utilizar. Ejemplo:

@Autowired
@Qualifier("class_name_lowercase")
public Interfaz_name object_name;

(investigar si podemos utlizarlo en un metodo constructor, setter o un metodo cualquiera.)

Con la anotacion @Scope("prototype") ubicado sobre declaracion de una clase podemos decirle a java que todos los objetos que sean creados a partir de esa clase usen el modelo prototype, es decir cada uno de los objetos creados apuntaran a una direccion diferente en memoria, por defecto en el caso de Spring java viene por defecto configurado para crear objetos de tipo singleton, es decir objetos que siempre van a estar referidos a una misma direccion en memoria.

Con las anotaciones @PostConstruct (anotacion que hace la misma funcion que el metodo init-method del context de xml) y @PreDestroy (anotacion que hace la misma funcion que el metodo destroy-method del context de xml) podemos ejecutar metodos justo despues de la creacion del bean y justo antes de la destruccion del mismo. Estas anotacion solo sirve cuando el modelo de creacion de los beans es singleton, no es aplicable para prototype.

Para crear la configuracion de Spring a traves de Java Annotations debemos crear una clase la cual va a tener los elementos de la configuracion, para ello creamos la clase y justo encima de la declaracion de clase comenzamos a colocar las anotaciones para su configuracion, el primer elemento @Configuration le indica a java que esta clase contra la configuracion de Spring, luego colocamos una tras otra las anotaciones que necesitemos, como por ejemplo para crear los beans de una clase colocamos @ComponentScan("package_name") lo que nos permitira crear objetos de todas las clases contenidas en este paquete que contengan la anotacion @Component("reference_class_name") sobre la declaracion de la clase.
Nota recordar que el nombre de referencia de la clase lo utilizamos al crear el bean. Ejemplo:

// Creacion de objeto para crear los beans
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(class_config_name.class);

(el nombre del objeto en este caso podemos tomarlo como nos lo ofrece java "context", pero podemos elegir cualquier nombre)

// Creacion de un bean de una clase
Interfaz_name object_name =context.getBean("reference_class_name", Interfaz_name.class);

(El nombre del objeto al crear los beans podemos referirlo a la logica del objeto, por ejemplo si es un objeto de tipo empleado, podemos colocarle el nombre de ese empleado)

"""Inyectar Valores a una Variable desde un Archivo Externo"""

Para inyectar valores a una variable desde un archivo externo, 
podemos utilizar las Java Annotations @PropertySource nos va a 
indicar en donde se encuentran estos datos y con @Value indicaremos 
en cada variable la referencia del nombre contenido en el archivo al de la variable a la cual queremos asignar dicho valor.

*Creamos inicialmente un archivo en el cual vamos a guardar todos los 
valores que vayamos a utilizar(debe estar ubicado dentro de src).

*Ahora vamos a la clase de configuracion del Spring y sobre la 
declaracion de la clase al igual que la otras anotaciones agregamos 
@PropertySource("classpath:nombre_archivo_externo") esto permitira 
a java identificar la ubicacion de nuestros datos.

*Posteriormente vamos a la clase en donde esten declaradas estas variables (o si no estan creadas en la clase donde vayamos a declararlas) 
y sobre la declaracion de cada una de nuestras variables colocaremos la siguiente anotacion:
@Value("${name_reference}")
(name_reference sera el nombre de la variable a la que refiere en el archivo externo)

*Si las variables estan declaradas como privadas debemos crear los metodos getter para poder utilizarlas luego.

*Luego vamos al metodo main y creamos un objeto de la clase de la cual 
vayamos a utilizar las variables que referenciamos:

Class_name object_name = context.getBean("class_name", Class_name.class)

(El nombre del objeto al crear los beans podemos referirlo a la logica del objeto, por ejemplo si es un objeto de tipo empleado, podemos colocarle el nombre de ese empleado)

*Luego ya podremos obtener los valores de estas variables, invocandolas 
a traves del objeto que creamos y los metodos getter.


