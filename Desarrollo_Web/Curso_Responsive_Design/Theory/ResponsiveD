Para abordar el campo del Responsive Design es necesario que tengas claridad sobre algunos conceptos básicos.

Por este motivo, durante esta clase aprenderás qué es el Responsive Design, cuáles son los lenguajes de programación que lo hacen posible, qué medidas son necesarias aplicar para lograr que tus proyectos se adapten a pantallas de diversas medidas y condiciones, cuáles son los principios del Responsive Design (mostly fluid, colocación de columnas, layout shifter, tiny tweaks, off canvas).

Finalmente, aprenderás el objetivo principal del Responsive Design: la óptima visualización de las web sites en cualquier dispositivo y podrás tener referentes en www.mediaqueri.es

****Configuración de la vista*****
HTML5 introdujo un método para permitir que los diseñadores web tomen el control de la ventana gráfica, a través de la etiqueta <meta> .

Debe incluir el siguiente elemento de vista <meta> en todas sus páginas web:

<meta name=“viewport” content=“width=device-width, initial-scale=1.0”>
Un elemento de vista <meta> le da al navegador instrucciones sobre cómo controlar las dimensiones y la escala de la página.

La parte width=device-width establece el ancho de la página para seguir el ancho de pantalla del dispositivo (que variará dependiendo del dispositivo).

La parte de initial-scale=1.0 establece el nivel de zoom inicial cuando el navegador carga la página por primera vez.

****Medidas relativas útiles en Responsive Design****

En esta clase aprenderás las medidas que existen en el campo del responsive design.

•Lo primero que debes tener en cuenta es que estas medidas son maleables, en la medida en que dependen de su fuente de origen o medida madre. Entre ellas se encuentran el porcentaje (longitud referente al tamaño de los elementos padre), los em (unidad relativa al tamaño de fuente especificada más cercano), los rem (unidad relativa al tamaño de fuente especificada en el ancestro más lejano, como html o body) y tamaños del viewport vw/vh (longitud relativa porcentual con respecto al viewport).

•Medidas útiles en Responsive Design

- %: Porcentaje, se mide en referencia a la longitud de los elementos padres.

- em: Unidad relativa al tamaño de fuente más cercana, la fuente más cercana corresponde primero al elemento mismo, sino lo hace con el elemento padre mas cercano que tenga fuente definida y donde 1em corresponde a ese tamaño de fuente.

- rem: Unidad relativa al tamaño de fuente más lejana (html o body).

- vw/vh: Unidad relativa conceptual en relación al Viewport.

- 100 vw: 100% del width con respecto al Viewport actual.

- 100 vh: 100% del height con respecto al Viewport actual.

Unidades de medida en CSS / (Px, Porcentajes, Em y Rem)

****Diseño elástico con max-width y flex-wrap*****

Como te habrás dado cuenta tu proyecto está desordenado aunque carga en el viewport. Por esta razón en esta clase aprenderás a ordenar tu proyecto por medio del uso de contenedores flexibles, que varíen su tamaño según la amplitud con la que cuentan en diversos dispositivos y permitan una óptima visualización.

Por otro lado, para hacer esto posible, aprenderás a aplicar las etiquetas de max-width y flex- wrap; éstas también te ayudarán a evitar que tu usuario necesite navegar la página de forma horizontal, pues la información se organizará en forma vertical para facilitar la experiencia.

****Posicionando el menú****

.menu {
    position: fixed;
    background-color: rgba(5, 111, 255, .9);
    z-index: 3;
    top: 0;
    left:-100vw; /* Para que el menu se oculte a la izquierda y se cree el efecto al hacer click*/
    width: 100vw;
    bottom: 0;/* height: 100vw; *//*A partir de aqui para centrar*/
    display: flex;
    align-items: center;
    justify-content: center; /* centrar hasta aqui */
    transition: .3s; /* Para crear efecto de transición */
}

.menu.is-active {
    left: 0;
}

****Añadiendo Javascript para detección de eventos****

La interactividad que necesitarás para tu menú, se concentrará en algunas acciones, la primera de ellas es la que sucede al cliquear sobre el botón o el icono.

Para lograr esto harás uso del lenguaje de programación JavaScript, recuerda que este lenguaje hace posible la codificación de experiencias interactivas en el desarrollo web (si te interesa, te recomendamos tomar el Curso de jQuery a JavaScript, y el curso de Fundamentos de JavaScript).

Algunas de las instrucciones de JS que aplicarás serán, console.log, document.querySelector, classList, variables (const nombre =), burgerButton, EventListener, entre otras.


****Media queries con JavaScript****

En esta clase aprenderás a implementar media queries con JavaScript, para esto usarás instrucciones como window.matchMedia, console.log -nuevamente-, event, entre otros.

El propósito es que tu menú quede listo para ofrecer una experiencia interactiva y sea flexible en distintos dispositivos, es decir, que sea interactivo y responsivo.

De forma adicional, aprenderás a agregar y quitar listeners de tus eventos, pues no siempre son la mejor opción en la experiencia de navegación.

***Remote Debugging en Android y puliendo últimos detalles****

Así como aprendiste a configurar el remote debugging para iOS, en esta clase aprenderás a configurarlo para dispositivos Android. Para aprender a hacerlo, debes tener conectado tu teléfono a tu computador vía usb y activar el menú de desarrollador -el cual se encuentra en la configuración-; al activarlo debe aparecer un menú adicional desde el cual podrás utilizar el inspector de elementos en tu computador, desde el explorador que tengas (que para esta ocasión será Google Chrome). Desde este lugar podrás modificar los diversos elementos de tu proyecto, aplicando las herramientas y conocimientos que ya dominas hasta el momento. Por último, ¡pulirás los detalles finales de tu proyecto!

red
Si tras realizar modificaciones no se visualizan en el inspector 
de elementos debemos ir a la seccion network del inspector y 
desactivar la memoria cache en el check.
red