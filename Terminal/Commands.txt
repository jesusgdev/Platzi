ls ../    lista los archivos de directorio anterior

ls         lista los archivos del directorio actual

cp archivo directorio/    copia el archivo elegido al directorio seleccionado

rm archivo    borra el archivo seleccionado

mv ../archivo .     mueve el archivo seleccionado del directorio anterior al
directorio actual.
Para mover un archivo o directorio me coloco en la carpeta actual en el cual
se encuentra y escribo el comando 
mv archivo_directorio /ruta/a/la/cual/deseas/mover

rmdir directorio/     borra el directorio elegido (el directorio debe estar
vacio, no se puede borrar un directorio con archivos adentro)


""""""Comandos para trabajar desde nuestra ubicación"""""""
Lista los archivos que se encuentran en el directorio sobre el que 
estamos trabajando:

> ls
Lista todos los archivos incluyendo aquellos que se han definido 
como ocultos:

> ls -a
Todos los directorios contienen los archivos . y .., estos son 
punteros a directorios.

.. --> directorio padre
. --> directorio actual
Otros parámetros que puedes usar con el comando ls:

Ordena los archivos por fecha de modificación:

> ls -t
Ordena elementos primero por nombre y después por extensión:

> ls -x
Ordena los elementos primero por extensión y luego por nombre:

> ls -X
Muestra toda la información: usuario, grupo, permisos, tamaño, 
fecha y hora de creación.

> ls -l
Muestra la misma información que ls -l pero con las unidades de 
tamaño en KB, MB:

> ls -lh
Muestra el contenido de todos los subdirectorios de forma recursiva:

> ls -R
Ordena los resultados por tamaño de archivo:

> ls -S
Comandos para cambiar de ubicación
Print Working Directory: se usa para mostrar el directorio actual en 
el que nos encontramos trabajando.

> pwd
cd: se utiliza para cambiar de directorio. Luego del comando se debe 
especificar la ruta del directorio al que nos queremos mover. Por ejemplo:

> cd /home/mi_usuario
Comandos para mover, copiar o borrar
cp: copiar un archivo hacia un directorio.

> cp [archivo que se va a copiar] [directorio hacia el que se va a mover]
rm: eliminar un archivo.

> rm archivo.txt
`mv``: mover un archivo, cambiar su ubicación. La sintaxis es así:

>mv [ruta del archivo] [directorio hacia el que se va a mover]
rmdir: eliminar un directorio. En este caso es importante resaltar que, 
para que el directorio pueda ser eliminado, no puede contener archivos 
u otros directorios en su interior.

> rmdir [ruta / nombre del directorio a eliminar]


cat archivo.txt   Nos muestra el contenido de un archivo

head -n N archivo.txt   Nos muestras las primeras N lineas del contenido del
archivo.

tail -n  N archivo.txt      Nos muestra las ultimas N lineas del contenido del
archivo.

grep   Permite hallar palabras o frases contenidas en un archivo a traves 
del uso de expresiones regulares.

Ejemplos:
grep palabra archivo    Nos muestra si la palabra existe o no en determinando
archivo y como resultado obtenemos la expresion completa de dicha palabra
(en caso de estar contenida en una tupla o lista).

grep -i palabra archivo   Nos muestra si la palabra existe independientemente
si esta escrita en mayusculas o minusculas.

grep -i "palabra$" archivo    Nos muestra si hay alguna expresion que termina con 
dicha palabra en el archivo (Debe incluir todos los elementos que posee la palabra
antes del espacio, incluyendo "," y "()" )

sed   Al igual que grep nos permite hallar una palabra o frase contenida en un archivo
pero a su vez replazar parte del contenido que se muestra en el resultado por alguna 
otra expresion que se desee (Este comando no altera el contenido del archivo)

Ejemplo:
sed 's/(palabra_expresion a sustituir)/(nueva palabra)/g archivo   Este comando nos 
muestra el contenido del archivo modificando la palabra seleccionada (la letra s se
agrega al principio para denotar que se hara una sustitucion) por la nueva palabra
elegida (se usa la letra g para especificar que se hara a lo largo de todo el archivo).

sed '$d' archivo  Este comando nos muestra el contenido del archivo eliminando la
ultima linea.

awk  Al igual que grep nos muestra el contenido de un archivo seleccionando y
modificando el resultado a mostrar pero funciona principalmente en archivos de
tipo estructurado (separados por "," o "()" )

Ejemplos:
awk -F ';' '{ print $1}' archivo  Con este comando se imprime la primera columna de
cada fila contenidos en el archivo que terminen en ; (sin incluirlo).

awk -F ';' 'NR > 1 && $3 > 0 { print $1, $3 * $4 }' archivo  Este comando nos mostrara el
contenido de la primera columna de cada fila (hasta el limitador ;) y seguido de un 
espacio la multiplicacion de la tercera columna por la cuarta columna de cada fila, esto
considerando que la primera fila sea mayor a 1 y el valor de la tercera columna mayor a 0.

ls > archivo.txt   Este comando redirecciona el lista del contenido del directorio actual a un 
archivo de texto, esto se hace con la idea de almacenar la informacion

ls >> archivo.txt   Este comando a diferencia del anterior no almacena el contenido en archivo
nuevo si no que agrega el contenido solicitado al final del contenido de un archivo existente.

Para encadenar dos procesos secuencialmente (uno tras otro) se utiliza el comando | o pipe
el cual sirve para ejecutar dos comandos uno tras otro en una misma linea de comandos
Ejemplos:

ls -l | more  Este comando nos mostrara la lista detalla de archivos contenidos en el directorio
actual y a traves del recurso de pipe agregara el comando more que nos mostrara la informacion
en bloques (por paginas) la cual podremos ir viendo haciendo uso de more.

cat archivo.txt | wc -l   Este comando imprime en pantalla el contenido del archivo.txt pero
al utilizar ademas el recurso de pipe y agregar un contador de lineas al final de la linea de 
comandos el resultado que nos mostrara en pantalla sera el del total de lineas que contiene el
archivo de texto.

Los permisos nos permiten establacer los limites y acciones permisibles que puede tener un
usuario, grupo u otro usuario externo sobre un determinado archivo.

Usualmente la estuctura de los permisos para un archivo viene representada de la siguiente
forma:

usuario _ grupo _ otro
r w x         r w x       r w x

Cuando el elemento en cuestion es un directorio viene precedido de la letra "d" si es una lista
de archivos o una ruta de acceso con la letra 'l" , los archivos en general poseen el simbolo de 
"-" al principio de la linea de instucciones.
Ejemplos:

drwxrwxrwx   Este es un directorio donde todos tienen los permisos para acceder a las
funcionalidades basicas en el sistema (lectura, escritura y ejecucion)

lrwxrwxrwx   Esta es una ruta en la cual todos tienen el permiso para acceder y hacer
uso de la funcionalidades basicas del sistema.

-rw- rw- rw-   En este archivo todos tienen los permisos para acceder a las funcionalidades
de escritura y lectura pero ninguno posee permisos de ejecucion.

Para alterar o modificar los permisos de acceso para archivos, directorios y demas poseemos
una serie de comandos que pueden definir que permisos quitar y agregar, y a que grupos o usuarios.
Ejemplos:

chmod o-w archivo.txt   Este comando elimina en este caso el permiso de escritura para los usuarios
externos (otros/others).

chmod +x archivo.exe  Este comando permite agregar los permisos de ejecucion, en este caso para
todos los del grupo de acceso(usuario, grupos, otros) de manera simultanea, de manera que 
pasamos de esto    -rw- rw- rw-      a esto    -rwx rwx rwx 

sudo chown usuarionuevo archivo    Este comando nos permite agregar permisos de dueño sobre 
un deteminado archvio a otro usuario dentro del sistema, agregado el comando sudo al principio 
de la linea de comandos y mediante el comando chown. (ch own)

sudo chgrp gruponuevo archivo     Este comando al igual que el anterior nos permite agregar
permisos pero en este caso para agregar el grupo al cual pertenece el archivo. (ch grp)

Para comprimir archivos podemos usar la utilidad gzip.
Ejemplos:

gzip archivo.txt   Este comando comprime este archivo de texto y nos arroja como resultado
un archivo.txt.gz el cual representa el mismo archivo pero comprimido
Si queremos descomprimirlo solo debemos agregar a la linea de comandos un modificador,
en este caso   gzip -d archivo.txt.gz y volveremos a terner nuevamente el archivo original.

Para agrupar archivos en un mismo paquete podemos usar la utilidad tar.
Ejemplos:

tar cf directorio.tar directorio/*   Con este comando agrupamos todos los archivos contenidos 
en la carpeta "directorio", el cf representa la expresion "compression file" (aun cuando realmente
el tamaño seguira siendo el mismo) directorio.tar representa el archivo resultante donde estaran 
agrupados y directorio/* indica que va a agrupar todos los archivos contenidos en esa carpeta. 
Para poder verificar el contenido del nuevo archivo resultante usamos el comando tar tf 
directorio.tar y nos mostrara una lista de los elementos contenidos en este directorio. Para 
obtener nuevamente el directorio original usamos el comando tar xf directorio.tar y nos 
devolvera nuevamente el directorio. La descompresion debe hacerse en un directorio diferente al 
que ocupa el directorio original para evitar cualquier problema.


tar czf directorio.tgz directorio/*   Con este comando utilizamos una propiedad del comando
gzip que agrupa y comprime una serie de archivos en este caso contenidos en un directorio y nos
arroja como resultado un archivo directorio.tgz. Para descomprimir y devolver el directorio a su
estado original utilizamos el comando tar xzf directorio.tgz y devolvemos el directorio a su estado
original. La descompresion debe hacerse en un directorio diferente al que ocupa el directorio 
original para evitar cualquier problema.

Para ejecutar scripts o comandos diferidos usamos el comando at now +n minutes, en este caso
n la sustituiremos por la cantidad de minutos que pasaran hasta que se ejecute el comando.
posteriormente nos saldra un mensaje como este:
warning: commands will be executed usign /bin/sh at> "y aqui colocamos el comando que 
deseamos ejecutar".
Ejemplo:

at now +2 minutes
...at> echo "hola mundo!" > /home/drakj/hola.txt   Este comando agregara un mensaje "hola
mundo!" dentro de un archivo hola.txt
ES posible que se nos presente un error con el siguiente mensaje "Can't open /var/run/atd.pid 
to signal atd. No atd running?" para solucionarlo instalamos el paquete daemon y ya podremos 
ejecutar el programa!. (para instalar daemon usamos sudo, sudo apt install daemon).

Otro comando muy util para ejecutar taeras programadas es el comando crontab -e, donde
al ejecutarlos nos mostrara una ventana de edicion de texto con una series de comentarios al
inicio referentes al programa y nos dejara el cursor en la linea de comandos para introducir la
tarea asignada. El orden para programar la fecha y hora es el siguiente:

minute hour day month week command 
Ejemplo:
45 12 * * * echo "hola!" > hola.txt   Con este comando se ejecutara una tarea asignada a las 12:45
de cualquier dia, mes y semana en el cual se agregara a un archivo hola.txt un mensaje de "hola!".






 

